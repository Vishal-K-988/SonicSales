// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// Created 4 tables : 
// 1. webinar
// 2. User
// 3. attendee
// 4. attendance 

// Created 4 enums : 
// 1. WebinarStatusEnum
// 2. CtaTypeEnum
// 3. AttendedTypeEnum
// 4. CallStatusEnum




// creating 4 ENUMS 
enum WebinarStatusEnum {
  SCHEDULED
  WAITING_ROOM
  LIVE
  ENDED
  CANCELLED
}

enum CtaTypeEnum {
  BUY_NOW
  BOOK_A_CALL
}

enum AttendedTypeEnum {
  REGISTERED 
  ATTENDED 
  ADDED_TO_CART
  FOLLOW_UP
  BREAKOUT_ROOM
  CONVERTED
}

enum CallStatusEnum {
  PENDING
  IN_PROGRESS
  COMPLETED
}





// table : User 
model User {
  id  String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String @db.VarChar(100)
  clerkId String @unique
  email String @unique
  profileImage String

  stripeConnectId String? @db.VarChar(255)
  lastLoginAt DateTime? 
  createdAt DateTime  @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  subscription Boolean @default(false)
  stripeCustomerId String? @db.VarChar(255)


  @@index([email])
  @@index([clerkId])

}

// table : Webinar 
model Webinar {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title String @db.VarChar(255)
  description String? @db.Text
  startTime DateTime
  endTime DateTime?
  duration Int @default(0)
  webinarStatus WebinarStatusEnum @default(SCHEDULED)
  presenter User @relation("PresenterWebinars" , fields: [presenterId],references: [id] , onDelete: Cascade )
  presenterId String @db.Uuid
  attendances Attendance[]
  tags String[]
  ctaLabel String? @db.VarChar(50)
  ctaType CtaTypeEnum 
  ctaUrl String? @db.VarChar(255) 
  couponCode String? @db.VarChar(255) 
  couponEnable Boolean @default(false)
  couponExpiry DateTime? 
  lockChat Boolean @default(false)
  stripeProductId String? @db.VarChar(255)
  aiAgentId String? @db.Uuid
  priceId String? @db.VarChar(255)
  recordingUrl String? 
  thumbnail String?
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
  deletedAt DateTime? 
  Attendee Attendee? @relation(fields: [attendeeId] , references: [id])
  attendeeId String? @db.Uuid

  @@index([presenterId])
  @@index([aiAgentId])
  @@index([startTime])
  
}

model Attendee {
  id String @id  @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email String @unique
  name String @db.VarChar(100)
  callStatus CallStatusEnum @default(PENDING)
  Attendance Attendance[] 
  Webinar Webinar[]
}


model Attendance {
  id String @id  @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  webinarId String @db.Uuid 
  joinedAt DateTime @default(now())
  leftAt DateTime?
  user Attendee @relation(fields: [attendeeId], references: [id])
  webinar Webinar @relation(fields: [webinarId] , references: [id] , onDelete: Cascade)
  attendanceType AttendedTypeEnum
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  attendeeId String @db.Uuid
  userId String? @db.Uuid


  @@unique([attendeeId, webinarId])
  @@index([attendanceType])
  @@index([webinarId])
}